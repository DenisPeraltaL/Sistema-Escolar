/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package VISTA;

import MODELO.ConexionDB;
import java.sql.SQLException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Denis Peralta
 */
public class VPNuevoGrupo extends javax.swing.JFrame {
private DefaultComboBoxModel<String> modeloMaterias; // Modelo para gestionar las materias seleccionadas
    
    

    /**
     * Creates new form NuevoGrupo
     */
    public VPNuevoGrupo() {
          initComponents();
    cargarMaterias();
    cargarProfesores();
    inicializarTabla();
       this.setExtendedState(JFrame.MAXIMIZED_BOTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblLogo = new javax.swing.JLabel();
        lblTitulo = new javax.swing.JLabel();
        lblTexto2 = new javax.swing.JLabel();
        lblNombreGrupo = new javax.swing.JLabel();
        lblMateria = new javax.swing.JLabel();
        btnVolver = new javax.swing.JButton();
        btnEliminarGrupo = new javax.swing.JButton();
        btnCrear = new javax.swing.JButton();
        btnAnadir = new javax.swing.JButton();
        cmbMateria = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        cmbProfesor = new javax.swing.JComboBox<>();
        lblMateria1 = new javax.swing.JLabel();
        txtNombreGrupo = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Desing/Hope logo 13.png"))); // NOI18N
        getContentPane().add(lblLogo, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 80, -1, -1));

        lblTitulo.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        lblTitulo.setForeground(new java.awt.Color(51, 51, 51));
        lblTitulo.setText("NUEVO GRUPO");
        getContentPane().add(lblTitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 90, 450, -1));

        lblTexto2.setFont(new java.awt.Font("Segoe UI Semibold", 1, 12)); // NOI18N
        lblTexto2.setForeground(new java.awt.Color(153, 153, 153));
        lblTexto2.setText("Complete la información con los datos del grupo");
        getContentPane().add(lblTexto2, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 140, 450, 20));

        lblNombreGrupo.setFont(new java.awt.Font("Segoe UI Semibold", 1, 12)); // NOI18N
        lblNombreGrupo.setForeground(new java.awt.Color(153, 153, 153));
        lblNombreGrupo.setText("Nombre del grupo");
        getContentPane().add(lblNombreGrupo, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 180, 290, 20));

        lblMateria.setFont(new java.awt.Font("Segoe UI Semibold", 1, 12)); // NOI18N
        lblMateria.setForeground(new java.awt.Color(153, 153, 153));
        lblMateria.setText("Materia");
        getContentPane().add(lblMateria, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 260, 230, 20));

        btnVolver.setBackground(new java.awt.Color(204, 204, 204));
        btnVolver.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Desing/Volver.png"))); // NOI18N
        btnVolver.setText("Volver");
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });
        getContentPane().add(btnVolver, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 680, 120, 30));

        btnEliminarGrupo.setBackground(new java.awt.Color(204, 204, 204));
        btnEliminarGrupo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Desing/Eliminar.png"))); // NOI18N
        btnEliminarGrupo.setText("Eliminar Materia");
        btnEliminarGrupo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarGrupoActionPerformed(evt);
            }
        });
        getContentPane().add(btnEliminarGrupo, new org.netbeans.lib.awtextra.AbsoluteConstraints(1060, 680, 170, 30));

        btnCrear.setBackground(new java.awt.Color(204, 204, 204));
        btnCrear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Desing/Añadir.png"))); // NOI18N
        btnCrear.setText("Crear grupo");
        btnCrear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearActionPerformed(evt);
            }
        });
        getContentPane().add(btnCrear, new org.netbeans.lib.awtextra.AbsoluteConstraints(1250, 680, 130, 30));

        btnAnadir.setBackground(new java.awt.Color(204, 204, 204));
        btnAnadir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Desing/clip.png"))); // NOI18N
        btnAnadir.setText("Añadir");
        btnAnadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnadirActionPerformed(evt);
            }
        });
        getContentPane().add(btnAnadir, new org.netbeans.lib.awtextra.AbsoluteConstraints(1230, 380, 140, 30));

        cmbMateria.setForeground(new java.awt.Color(153, 153, 153));
        cmbMateria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar Materia" }));
        cmbMateria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbMateriaActionPerformed(evt);
            }
        });
        getContentPane().add(cmbMateria, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 280, 440, 40));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 420, 1080, 200));

        cmbProfesor.setForeground(new java.awt.Color(153, 153, 153));
        cmbProfesor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar Usuario" }));
        cmbProfesor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbProfesorActionPerformed(evt);
            }
        });
        getContentPane().add(cmbProfesor, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 360, 440, 40));

        lblMateria1.setFont(new java.awt.Font("Segoe UI Semibold", 1, 12)); // NOI18N
        lblMateria1.setForeground(new java.awt.Color(153, 153, 153));
        lblMateria1.setText("Maestro A Impartir");
        getContentPane().add(lblMateria1, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 340, 290, 20));
        getContentPane().add(txtNombreGrupo, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 200, 440, 40));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnVolverActionPerformed

    private void btnEliminarGrupoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarGrupoActionPerformed
// Verificar que haya una fila seleccionada
    int filaSeleccionada = jTable1.getSelectedRow();
    if (filaSeleccionada == -1) {
        JOptionPane.showMessageDialog(this, "Debe seleccionar una fila para eliminar.");
        return;
    }
    // Eliminar la fila seleccionada del modelo de la tabla
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    model.removeRow(filaSeleccionada);
    }//GEN-LAST:event_btnEliminarGrupoActionPerformed

    private void btnCrearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearActionPerformed
    String nombreGrupo = txtNombreGrupo.getText().trim(); // Asegúrate de no convertir a entero

    // Validar que el nombre del grupo no esté vacío
    if (nombreGrupo.isEmpty()) {
        JOptionPane.showMessageDialog(this, "El nombre del grupo no puede estar vacío.");
        return;
    }

    // Validar formato del grupo (opcional: solo letras y números)
    if (!nombreGrupo.matches("^[A-Za-z0-9]+$")) {
        JOptionPane.showMessageDialog(this, "El nombre del grupo solo puede contener letras y números.");
        return;
    }

    String selectedProfesor = (String) cmbProfesor.getSelectedItem();

    // Validar que se haya seleccionado un profesor
    if ("Seleccionar Profesor".equals(selectedProfesor)) {
        JOptionPane.showMessageDialog(this, "Debe seleccionar un profesor.");
        return;
    }

    // Obtener el ID del profesor seleccionado
    String[] partsProfesor = selectedProfesor.split(" - ");
    int idProfesor = Integer.parseInt(partsProfesor[0]);

    try (Connection con = ConexionDB.getConnection()) {
        // Insertar el grupo en la tabla "grupos"
        String queryGrupo = "INSERT INTO grupos (nombre_grupo, id_profesor) VALUES (?, ?) RETURNING id";
        PreparedStatement psGrupo = con.prepareStatement(queryGrupo);
        psGrupo.setString(1, nombreGrupo); // Insertar el nombre del grupo como texto
        psGrupo.setInt(2, idProfesor);    // ID del profesor

        ResultSet rsGrupo = psGrupo.executeQuery();

        if (rsGrupo.next()) {
            int idGrupo = rsGrupo.getInt("id"); // ID del grupo recién creado

            // Validar conflicto de horarios antes de insertar materias
            for (int i = 0; i < jTable1.getRowCount(); i++) {
                int idMateria = Integer.parseInt(jTable1.getValueAt(i, 0).toString()); // ID de la materia
                if (existeConflictoHorario(idMateria, idGrupo)) {
                    JOptionPane.showMessageDialog(this, "Conflicto de horarios detectado para la materia seleccionada.");
                    return;
                }
            }

            // Insertar los detalles seleccionados en la tabla "grupos_materias"
            insertarMateriasSeleccionadas(con, idGrupo);

            JOptionPane.showMessageDialog(this, "Grupo creado correctamente con ID: " + idGrupo);
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error al crear el grupo: " + e.getMessage());
    }
} 

// Método auxiliar para validar conflictos de horarios
private boolean existeConflictoHorario(int idMateria, int idGrupo) {
    try (Connection con = ConexionDB.getConnection()) {
        String query = "SELECT COUNT(*) FROM grupos_materias gm " +
                       "JOIN materias m ON gm.id_materia = m.id " +
                       "WHERE gm.id_grupo = ? AND m.id = ?";
        PreparedStatement ps = con.prepareStatement(query);
        ps.setInt(1, idGrupo);
        ps.setInt(2, idMateria);
        ResultSet rs = ps.executeQuery();

        if (rs.next() && rs.getInt(1) > 0) {
            return true; // Hay conflicto
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error al verificar conflictos de horarios: " + e.getMessage());
    }
    return false;
}

// Método auxiliar para insertar materias seleccionadas
private void insertarMateriasSeleccionadas(Connection con, int idGrupo) {
    try {
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            int idMateria = Integer.parseInt(jTable1.getValueAt(i, 0).toString()); // ID de la materia

            String query = "INSERT INTO grupos_materias (id_grupo, id_materia) VALUES (?, ?)";
            PreparedStatement ps = con.prepareStatement(query);
            ps.setInt(1, idGrupo);
            ps.setInt(2, idMateria);
            ps.executeUpdate();
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error al insertar materias en el grupo: " + e.getMessage());
    }
    }//GEN-LAST:event_btnCrearActionPerformed

    private void btnAnadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnadirActionPerformed
String selectedMateria = (String) cmbMateria.getSelectedItem();

    if ("Seleccionar Materia".equals(selectedMateria)) {
        JOptionPane.showMessageDialog(this, "Debe seleccionar una materia.");
        return;
    }

    String[] parts = selectedMateria.split(" - ");
    int idMateria = Integer.parseInt(parts[0]);
    String nombreMateria = parts[1];

    try (Connection con = ConexionDB.getConnection()) {
        // Validar que la materia no esté duplicada en la tabla
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) jTable1.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            int idExistente = Integer.parseInt(model.getValueAt(i, 0).toString()); // Comparar ID de materia
            if (idExistente == idMateria) {
                JOptionPane.showMessageDialog(this, "La materia con ID '" + idMateria + "' ya está registrada en la tabla.");
                return;
            }
        }

        // Obtener días, hora inicio y hora fin de la materia seleccionada
        String query = "SELECT dia_semana, hora_inicio, hora_fin FROM materias WHERE id = ?";
        PreparedStatement ps = con.prepareStatement(query);
        ps.setInt(1, idMateria);
        ResultSet rs = ps.executeQuery();

        if (rs.next()) {
            String dias = rs.getString("dia_semana");
            String horaInicio = rs.getString("hora_inicio");
            String horaFin = rs.getString("hora_fin");

            // Añadir la materia al JTable con los datos recuperados
            model.addRow(new Object[]{idMateria, nombreMateria, dias, horaInicio, horaFin});
        } else {
            JOptionPane.showMessageDialog(this, "No se encontraron detalles de la materia seleccionada.");
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error al obtener detalles de la materia: " + e.getMessage());
    }
    }//GEN-LAST:event_btnAnadirActionPerformed

    private void cmbMateriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMateriaActionPerformed

    }//GEN-LAST:event_cmbMateriaActionPerformed

    private void cmbProfesorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbProfesorActionPerformed

    }//GEN-LAST:event_cmbProfesorActionPerformed
// Método para cargar las materias existentes en el JComboBox
   
    
    private void inicializarTabla() {
    jTable1.setModel(new javax.swing.table.DefaultTableModel(
        new Object[][]{},
        new String[]{"ID MATERIA", "MATERIA", "DIAS", "HORA INICIO", "HORA FIN"}
    ));
}
    // Método para cargar los profesores existentes en el ComboBox
private void cargarProfesores() {
    DefaultComboBoxModel<String> modeloProfesores = new DefaultComboBoxModel<>();
    cmbProfesor.setModel(modeloProfesores);
    modeloProfesores.addElement("Seleccionar Profesor"); // Primera opción

    try (Connection con = ConexionDB.getConnection()) {
        String query = "SELECT id, nombre FROM profesores";
        Statement stmt = con.createStatement();
        ResultSet rs = stmt.executeQuery(query);

        while (rs.next()) {
            int id = rs.getInt("id");
            String nombreProfesor = rs.getString("nombre");
            modeloProfesores.addElement(id + " - " + nombreProfesor);
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error al cargar profesores: " + e.getMessage());
    }
}
// Método para cargar las materias existentes en el ComboBox
private void cargarMaterias() {
    modeloMaterias = new DefaultComboBoxModel<>();
    cmbMateria.setModel(modeloMaterias);
    modeloMaterias.addElement("Seleccionar Materia"); // Primera opción

    try (Connection con = ConexionDB.getConnection()) {
        String query = "SELECT id, nombre_materia FROM materias";
        Statement stmt = con.createStatement();
        ResultSet rs = stmt.executeQuery(query);

        while (rs.next()) {
            int id = rs.getInt("id");
            String nombreMateria = rs.getString("nombre_materia");
            modeloMaterias.addElement(id + " - " + nombreMateria);
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error al cargar materias: " + e.getMessage());
    }
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VPNuevoGrupo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VPNuevoGrupo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VPNuevoGrupo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VPNuevoGrupo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VPNuevoGrupo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnadir;
    private javax.swing.JButton btnCrear;
    private javax.swing.JButton btnEliminarGrupo;
    private javax.swing.JButton btnVolver;
    private javax.swing.JComboBox<String> cmbMateria;
    private javax.swing.JComboBox<String> cmbProfesor;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblLogo;
    private javax.swing.JLabel lblMateria;
    private javax.swing.JLabel lblMateria1;
    private javax.swing.JLabel lblNombreGrupo;
    private javax.swing.JLabel lblTexto2;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JTextField txtNombreGrupo;
    // End of variables declaration//GEN-END:variables
}
