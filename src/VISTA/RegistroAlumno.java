/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package VISTA;
import MODELO.ConexionDB;
import javax.swing.JOptionPane;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.table.DefaultTableModel;
import java.sql.ResultSet;
import java.sql.Connection;
import javax.swing.JFrame;

/**
 *
 * @author Denis Peralta
 */
public class RegistroAlumno extends javax.swing.JFrame {

    /**
     * Creates new form RegistroAlumno
     */
    public RegistroAlumno() {
        initComponents();
        cargarTabla();
        initUserComboBox();
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblLogo = new javax.swing.JLabel();
        lblNombreAlumno = new javax.swing.JLabel();
        txtApellidoM = new javax.swing.JTextField();
        btnVolver = new javax.swing.JButton();
        btnAñadir = new javax.swing.JButton();
        lblApellidoM = new javax.swing.JLabel();
        txtNombreAlumno = new javax.swing.JTextField();
        lblNumControl = new javax.swing.JLabel();
        txtNumControl = new javax.swing.JTextField();
        lblTexto2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        txtApellidoP = new javax.swing.JTextField();
        lblApellidoP = new javax.swing.JLabel();
        cmbGenero = new javax.swing.JComboBox<>();
        lblTitulo1 = new javax.swing.JLabel();
        txtCorreo = new javax.swing.JTextField();
        lblCorreo = new javax.swing.JLabel();
        txtNumTelefono = new javax.swing.JTextField();
        lblNumTelefono = new javax.swing.JLabel();
        btnEliminar = new javax.swing.JButton();
        btnModificar1 = new javax.swing.JButton();
        cmbUsuario = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Desing/Hope logo 13.png"))); // NOI18N
        getContentPane().add(lblLogo, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 80, -1, -1));

        lblNombreAlumno.setFont(new java.awt.Font("Segoe UI Semibold", 1, 12)); // NOI18N
        lblNombreAlumno.setText("Nombre");
        getContentPane().add(lblNombreAlumno, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 200, 170, 20));

        txtApellidoM.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204)));
        getContentPane().add(txtApellidoM, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 310, 370, 40));

        btnVolver.setBackground(new java.awt.Color(204, 204, 204));
        btnVolver.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Desing/Volver.png"))); // NOI18N
        btnVolver.setText("Volver");
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });
        getContentPane().add(btnVolver, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 660, 120, 30));

        btnAñadir.setBackground(new java.awt.Color(204, 204, 204));
        btnAñadir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Desing/Añadir.png"))); // NOI18N
        btnAñadir.setText("Añadir");
        btnAñadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAñadirActionPerformed(evt);
            }
        });
        getContentPane().add(btnAñadir, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 660, 120, 30));

        lblApellidoM.setFont(new java.awt.Font("Segoe UI Semibold", 1, 12)); // NOI18N
        lblApellidoM.setText("Apellido Materno");
        getContentPane().add(lblApellidoM, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 290, 220, 20));

        txtNombreAlumno.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204)));
        getContentPane().add(txtNombreAlumno, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 220, 370, 40));

        lblNumControl.setFont(new java.awt.Font("Segoe UI Semibold", 1, 12)); // NOI18N
        lblNumControl.setText("Número de control");
        getContentPane().add(lblNumControl, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 290, 230, 20));

        txtNumControl.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204)));
        getContentPane().add(txtNumControl, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 310, 370, 40));

        lblTexto2.setFont(new java.awt.Font("Segoe UI Semibold", 1, 12)); // NOI18N
        lblTexto2.setText("Complete la información con sus datos");
        getContentPane().add(lblTexto2, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 140, 360, 20));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "NOMBRE", "APELLIDO P", "APELLIDO M", "NUM_C", "CORREO", "TELEFONO", "Title 8"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 470, 1140, 170));

        txtApellidoP.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204)));
        getContentPane().add(txtApellidoP, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 220, 370, 40));

        lblApellidoP.setFont(new java.awt.Font("Segoe UI Semibold", 1, 12)); // NOI18N
        lblApellidoP.setText("Apellido Paterno");
        getContentPane().add(lblApellidoP, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 200, 210, 20));

        cmbGenero.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Genero", "Masculino", "Femenino" }));
        cmbGenero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbGeneroActionPerformed(evt);
            }
        });
        getContentPane().add(cmbGenero, new org.netbeans.lib.awtextra.AbsoluteConstraints(1150, 310, 240, 40));

        lblTitulo1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        lblTitulo1.setForeground(new java.awt.Color(51, 51, 51));
        lblTitulo1.setText("REGISTRO ALUMNO");
        getContentPane().add(lblTitulo1, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 90, -1, -1));

        txtCorreo.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204)));
        getContentPane().add(txtCorreo, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 390, 510, 40));

        lblCorreo.setFont(new java.awt.Font("Segoe UI Semibold", 1, 12)); // NOI18N
        lblCorreo.setText("Correo");
        getContentPane().add(lblCorreo, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 370, 240, 20));

        txtNumTelefono.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204)));
        txtNumTelefono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumTelefonoActionPerformed(evt);
            }
        });
        getContentPane().add(txtNumTelefono, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 390, 360, 40));

        lblNumTelefono.setFont(new java.awt.Font("Segoe UI Semibold", 1, 12)); // NOI18N
        lblNumTelefono.setText("Número telefónico");
        getContentPane().add(lblNumTelefono, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 370, 240, 20));

        btnEliminar.setBackground(new java.awt.Color(204, 204, 204));
        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Desing/Eliminar.png"))); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        getContentPane().add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1310, 660, 120, 30));

        btnModificar1.setBackground(new java.awt.Color(204, 204, 204));
        btnModificar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Desing/Editar.png"))); // NOI18N
        btnModificar1.setText("Modificar");
        btnModificar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificar1ActionPerformed(evt);
            }
        });
        getContentPane().add(btnModificar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1170, 660, 120, 30));

        cmbUsuario.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar Alumno", "Administrador", "Profesor", "Alumno" }));
        cmbUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbUsuarioActionPerformed(evt);
            }
        });
        getContentPane().add(cmbUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 220, 270, 40));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnVolverActionPerformed

    private void btnAñadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAñadirActionPerformed
     // Validar si hay un usuario seleccionado
        String selectedItem = (String) cmbUsuario.getSelectedItem();
        if (selectedItem == null || selectedItem.equals("Seleccionar Usuario")) {
            JOptionPane.showMessageDialog(this, "Por favor seleccione un usuario válido.");
            return;
        }

        try {
            // Extraer el ID del usuario desde el ComboBox
            int idUsuario = Integer.parseInt(selectedItem.split(" - ")[0].replace("A", "").trim());

            // Obtener otros datos del formulario
            String nombre = txtNombreAlumno.getText().trim();
            String apellidoP = txtApellidoP.getText().trim();
            String apellidoM = txtApellidoM.getText().trim();
            String numeroControl = txtNumControl.getText().trim();
            String correo = txtCorreo.getText().trim();
            String telefono = txtNumTelefono.getText().trim();
            String genero = (String) cmbGenero.getSelectedItem();

            // Validar campos obligatorios
            if (nombre.isEmpty() || apellidoP.isEmpty() || numeroControl.isEmpty() || correo.isEmpty() || telefono.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Por favor complete todos los campos obligatorios.");
                return;
            }

            // Validar formato de correo electrónico
            if (!correo.matches("^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$")) {
                JOptionPane.showMessageDialog(this, "Por favor ingrese un correo electrónico válido.");
                return;
            }

            // Validar formato de teléfono
            if (!telefono.matches("^\\d{10}$")) {
                JOptionPane.showMessageDialog(this, "Por favor ingrese un teléfono válido de 10 dígitos.");
                return;
            }

            // Validar género
            if (genero.equals("Género")) {
                JOptionPane.showMessageDialog(this, "Por favor seleccione un género.");
                return;
            }

            // Insertar datos en la base de datos
            try (Connection conn = ConexionDB.getConnection()) {
                String query = "INSERT INTO alumnos (id_usuario, nombre, apellido_paterno, apellido_materno, numero_control, correo, telefono, genero) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
                try (PreparedStatement pst = conn.prepareStatement(query)) {
                    pst.setInt(1, idUsuario);
                    pst.setString(2, nombre);
                    pst.setString(3, apellidoP);
                    pst.setString(4, apellidoM);
                    pst.setString(5, numeroControl);
                    pst.setString(6, correo);
                    pst.setString(7, telefono);
                    pst.setString(8, genero);
                    pst.executeUpdate();
                }
                JOptionPane.showMessageDialog(this, "Alumno añadido exitosamente.");
                limpiarCampos();
                cargarTabla(); // Actualizar la tabla después de añadir
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error al añadir el alumno: " + ex.getMessage());
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Error al procesar el ID del usuario seleccionado. Asegúrese de que el formato sea válido.");
        }
    }//GEN-LAST:event_btnAñadirActionPerformed

    private void txtNumTelefonoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNumTelefonoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNumTelefonoActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
  int selectedRow = jTable1.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Por favor seleccione un alumno de la tabla.");
        return;
    }

    int alumnoId = (int) jTable1.getValueAt(selectedRow, 0); // Obtiene el ID del alumno seleccionado

    try (Connection conn = ConexionDB.getConnection()) {
        String query = "DELETE FROM alumnos WHERE id = ?";
        try (PreparedStatement pst = conn.prepareStatement(query)) {
            pst.setInt(1, alumnoId);
            int rowsAffected = pst.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "Alumno eliminado exitosamente.");
                cargarTabla(); // Recargar la tabla después de la eliminación
            } else {
                JOptionPane.showMessageDialog(this, "No se pudo eliminar el alumno. Verifique la selección.");
            }
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error al eliminar el alumno: " + ex.getMessage());
    }

    }//GEN-LAST:event_btnEliminarActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
   int row = jTable1.getSelectedRow();
    if (row != -1) { 
        String numeroControl = String.valueOf(jTable1.getValueAt(row, 4)); 
        try (Connection conn = ConexionDB.getConnection()) {
            String query = "SELECT nombre, apellido_paterno, apellido_materno, correo, telefono, genero FROM alumnos WHERE numero_control = ?";
            try (PreparedStatement pst = conn.prepareStatement(query)) {
                pst.setString(1, numeroControl);
                try (ResultSet rs = pst.executeQuery()) {
                    if (rs.next()) {
                        txtNombreAlumno.setText(rs.getString("nombre"));
                        txtApellidoP.setText(rs.getString("apellido_paterno"));
                        txtApellidoM.setText(rs.getString("apellido_materno"));
                        txtCorreo.setText(rs.getString("correo"));
                        txtNumTelefono.setText(rs.getString("telefono"));
                        cmbGenero.setSelectedItem(rs.getString("genero"));
                        txtNumControl.setText(numeroControl);
                    }
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al cargar los datos del alumno: " + ex.getMessage());
        }
    }
    }//GEN-LAST:event_jTable1MouseClicked

    private void btnModificar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificar1ActionPerformed
         // Validar si hay un alumno seleccionado en la tabla
    int selectedRow = jTable1.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Por favor seleccione un alumno de la tabla para modificar.");
        return;
    }

    try {
        // Obtener el ID del alumno seleccionado desde la tabla
        int alumnoId = (int) jTable1.getValueAt(selectedRow, 0);

        // Obtener los datos del formulario
        String nombre = txtNombreAlumno.getText().trim();
        String apellidoP = txtApellidoP.getText().trim();
        String apellidoM = txtApellidoM.getText().trim();
        String numeroControl = txtNumControl.getText().trim();
        String correo = txtCorreo.getText().trim();
        String telefono = txtNumTelefono.getText().trim();
        String genero = (String) cmbGenero.getSelectedItem();

        // Validar campos obligatorios
        if (nombre.isEmpty() || apellidoP.isEmpty() || numeroControl.isEmpty() || correo.isEmpty() || telefono.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor complete todos los campos obligatorios.");
            return;
        }

        // Validar formato de correo electrónico
        if (!correo.matches("^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$")) {
            JOptionPane.showMessageDialog(this, "Por favor ingrese un correo electrónico válido.");
            return;
        }

        // Validar formato de teléfono
        if (!telefono.matches("^\\d{10}$")) {
            JOptionPane.showMessageDialog(this, "Por favor ingrese un teléfono válido de 10 dígitos.");
            return;
        }

        // Validar género
        if (genero.equals("Género")) {
            JOptionPane.showMessageDialog(this, "Por favor seleccione un género.");
            return;
        }

        // Actualizar los datos del alumno en la base de datos
        try (Connection conn = ConexionDB.getConnection()) {
            String query = "UPDATE alumnos SET nombre = ?, apellido_paterno = ?, apellido_materno = ?, numero_control = ?, correo = ?, telefono = ?, genero = ? WHERE id = ?";
            try (PreparedStatement pst = conn.prepareStatement(query)) {
                pst.setString(1, nombre);
                pst.setString(2, apellidoP);
                pst.setString(3, apellidoM);
                pst.setString(4, numeroControl);
                pst.setString(5, correo);
                pst.setString(6, telefono);
                pst.setString(7, genero);
                pst.setInt(8, alumnoId);
                pst.executeUpdate();
            }

            JOptionPane.showMessageDialog(this, "Alumno modificado exitosamente.");
            limpiarCampos();
            cargarTabla(); // Actualizar la tabla después de modificar
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al modificar el alumno: " + ex.getMessage());
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Error al procesar el ID del alumno. Asegúrese de que el formato sea válido.");
    }
      
    }//GEN-LAST:event_btnModificar1ActionPerformed

    private void cmbUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbUsuarioActionPerformed
  // Validar si hay un usuario seleccionado
   /* String selectedUser = (String) cmbUsuario.getSelectedItem();
    if (selectedUser != null && !selectedUser.equals("Seleccionar Usuario")) {
        try {
            // Extraer el ID del usuario desde el ComboBox
            int idUsuario = Integer.parseInt(selectedUser.split(" - ")[0].trim());

            // Consultar los datos del usuario en la base de datos
            try (Connection conn = ConexionDB.getConnection()) {
                String query = "SELECT nombre, apellidos, correo, telefono FROM usuarios WHERE id = ?";
                try (PreparedStatement pst = conn.prepareStatement(query)) {
                    pst.setInt(1, idUsuario);
                    try (ResultSet rs = pst.executeQuery()) {
                        if (rs.next()) {
                            // Rellenar los campos del formulario con los datos del usuario
                            txtNombreAlumno.setText(rs.getString("nombre"));
                            txtApellidoP.setText(rs.getString("apellido_paterno"));
                            txtApellidoM.setText(rs.getString("apellido_materno"));
                            txtCorreo.setText(rs.getString("correo"));
                            txtNumTelefono.setText(rs.getString("telefono"));
                        } else {
                            JOptionPane.showMessageDialog(this, "No se encontraron datos para el usuario seleccionado.");
                        }
                    }
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al cargar los datos del usuario: " + ex.getMessage());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Error al procesar el ID del usuario seleccionado. Verifique el formato.");
        }
    } else {
        // Limpiar los campos si no hay usuario seleccionado
        limpiarCampos();
    }*/
      // Validar que haya un usuario seleccionado
String selectedUser = (String) cmbUsuario.getSelectedItem();
    if (selectedUser != null && !selectedUser.equals("Seleccionar Usuario")) {
     
            // Extraer el ID del usuario desde el ComboBox
            int idUsuario = Integer.parseInt(selectedUser.split(" - ")[0].trim());


        // Consultar los datos del usuario seleccionado
        try (Connection conn = ConexionDB.getConnection()) {
            String query = "SELECT nombre, apellidos, correo FROM usuarios WHERE id = ?";
            try (PreparedStatement pst = conn.prepareStatement(query)) {
                pst.setInt(1, idUsuario);
                try (ResultSet rs = pst.executeQuery()) {
                    if (rs.next()) {
                        // Dividir los apellidos y llenar los campos correspondientes
                        String[] apellidos = rs.getString("apellidos").split(" ");
                        txtNombreAlumno.setText(rs.getString("nombre"));
                        txtApellidoP.setText(apellidos.length > 0 ? apellidos[0] : "");
                        txtApellidoM.setText(apellidos.length > 1 ? apellidos[1] : "");
                            txtCorreo.setText(rs.getString("correo"));
                           
                    }
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al cargar datos del usuario: " + ex.getMessage());
        }
    }
    }//GEN-LAST:event_cmbUsuarioActionPerformed

    private void cmbGeneroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbGeneroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbGeneroActionPerformed
private void cargarTabla() {
        // Método para cargar los datos de los alumnos en la tabla
        try (Connection conn = ConexionDB.getConnection()) {
            String query = "SELECT id, nombre, apellido_paterno, apellido_materno, numero_control, correo, telefono, genero FROM alumnos";
            try (PreparedStatement pst = conn.prepareStatement(query); ResultSet rs = pst.executeQuery()) {
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                model.setRowCount(0); // Limpiar la tabla antes de cargar los nuevos datos
                while (rs.next()) {
                    Object[] row = new Object[8];
                    row[0] = rs.getInt("id");
                    row[1] = rs.getString("nombre");
                    row[2] = rs.getString("apellido_paterno");
                    row[3] = rs.getString("apellido_materno");
                    row[4] = rs.getString("numero_control");
                    row[5] = rs.getString("correo");
                    row[6] = rs.getString("telefono");
                    row[7] = rs.getString("genero");
                    model.addRow(row);
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al cargar los datos: " + ex.getMessage());
        }
    }

    private void limpiarCampos() {
        // Limpiar los campos después de realizar una operación (añadir, modificar)
        txtNombreAlumno.setText("");
        txtApellidoP.setText("");
        txtApellidoM.setText("");
        txtNumControl.setText("");
        txtCorreo.setText("");
        txtNumTelefono.setText("");
        cmbGenero.setSelectedIndex(0);
    }
   private void initUserComboBox() {
        try (Connection conn = ConexionDB.getConnection()) {
            String query = "SELECT id, nombre, apellidos FROM usuarios WHERE tipo_usuario = 'Alumno'";
            try (PreparedStatement pst = conn.prepareStatement(query);
                 ResultSet rs = pst.executeQuery()) {
                cmbUsuario.removeAllItems();
                cmbUsuario.addItem("Seleccionar Usuario");
                while (rs.next()) {
                    int idUsuario = rs.getInt("id");
                    String nombreCompleto = rs.getString("nombre") + " " + rs.getString("apellidos");
                    cmbUsuario.addItem(idUsuario + " - " + nombreCompleto);
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al cargar usuarios: " + ex.getMessage());
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegistroAlumno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegistroAlumno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegistroAlumno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegistroAlumno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RegistroAlumno().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAñadir;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnModificar1;
    private javax.swing.JButton btnVolver;
    private javax.swing.JComboBox<String> cmbGenero;
    private javax.swing.JComboBox<String> cmbUsuario;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblApellidoM;
    private javax.swing.JLabel lblApellidoP;
    private javax.swing.JLabel lblCorreo;
    private javax.swing.JLabel lblLogo;
    private javax.swing.JLabel lblNombreAlumno;
    private javax.swing.JLabel lblNumControl;
    private javax.swing.JLabel lblNumTelefono;
    private javax.swing.JLabel lblTexto2;
    private javax.swing.JLabel lblTitulo1;
    private javax.swing.JTextField txtApellidoM;
    private javax.swing.JTextField txtApellidoP;
    private javax.swing.JTextField txtCorreo;
    private javax.swing.JTextField txtNombreAlumno;
    private javax.swing.JTextField txtNumControl;
    private javax.swing.JTextField txtNumTelefono;
    // End of variables declaration//GEN-END:variables
}
