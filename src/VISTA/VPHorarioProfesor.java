/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package VISTA;
import java.sql.Connection;

import MODELO.ConexionDB;
import javax.swing.JOptionPane;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.ResultSet;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author Denis Peralta
 */
public class VPHorarioProfesor extends javax.swing.JFrame {
 private int idProfesor;
    /**
     * Creates new form VPHorarioProfesor
     * @param idProfesor
     */
public VPHorarioProfesor(int idProfesor) {
    initComponents();
    this.setExtendedState(VPHorarioProfesor.MAXIMIZED_BOTH);
    this.idProfesor = idProfesor;
    configurarTabla();
    inicializarVista(); // Cargar grupos y configurar acciones
}

    VPHorarioProfesor() {
    }
        // Configurar las columnas de la tabla
    private void configurarTabla() {
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Materia");
        model.addColumn("Día");
        model.addColumn("Hora Inicio");
        model.addColumn("Hora Fin");
        model.addColumn("Aula");
        jTable1.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitulo = new javax.swing.JLabel();
        btnActualizar = new javax.swing.JButton();
        lblLogo = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        cmbSemestre = new javax.swing.JComboBox<>();
        btnVolver = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblTitulo.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        lblTitulo.setForeground(new java.awt.Color(51, 51, 51));
        lblTitulo.setText("HORARIO");
        getContentPane().add(lblTitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 70, -1, -1));

        btnActualizar.setBackground(new java.awt.Color(204, 204, 204));
        btnActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Desing/Document Check.png"))); // NOI18N
        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });
        getContentPane().add(btnActualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1260, 690, 140, 30));

        lblLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Desing/Hope logo 13.png"))); // NOI18N
        getContentPane().add(lblLogo, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 80, -1, -1));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Materia", "Semestre", "Dia", "Hora_Inicio", "Hora_Fin", "Aula"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 180, 1100, 480));

        cmbSemestre.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        cmbSemestre.setForeground(new java.awt.Color(153, 153, 153));
        cmbSemestre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "GRUPO" }));
        getContentPane().add(cmbSemestre, new org.netbeans.lib.awtextra.AbsoluteConstraints(1220, 120, 180, 50));

        btnVolver.setBackground(new java.awt.Color(204, 204, 204));
        btnVolver.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Desing/Volver.png"))); // NOI18N
        btnVolver.setText("Volver");
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });
        getContentPane().add(btnVolver, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 680, 120, 30));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
    
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnVolverActionPerformed
// Método para cargar los grupos en el ComboBox
private void cargarGruposProfesor() {
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;

    try {
        con = ConexionDB.conectar();
        if (con == null) {
            JOptionPane.showMessageDialog(this, "No se pudo establecer conexión con la base de datos.");
            return;
        }

        String sql = "SELECT g.id, g.nombre_grupo FROM grupos g WHERE g.id_profesor = ?";
        stmt = con.prepareStatement(sql);
        stmt.setInt(1, idProfesor);

        rs = stmt.executeQuery();

        // Limpiar el ComboBox antes de cargar los grupos
        cmbSemestre.removeAllItems();
        cmbSemestre.addItem("Seleccionar Grupo");

        while (rs.next()) {
            int idGrupo = rs.getInt("id");
            String nombreGrupo = rs.getString("nombre_grupo");
            cmbSemestre.addItem(idGrupo + " - " + nombreGrupo); // Combina ID y nombre del grupo
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error al cargar los grupos: " + e.getMessage());
    } finally {
        try {
            if (rs != null) rs.close();
            if (stmt != null) stmt.close();
            if (con != null) ConexionDB.cerrarConexion(con);
        } catch (SQLException ex) {
            System.out.println("Error al cerrar recursos: " + ex.getMessage());
        }
    }
}

// Método para cargar los horarios del grupo seleccionado
private void cargarHorariosGrupoSeleccionado() {
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;

    String selectedGrupo = (String) cmbSemestre.getSelectedItem();
    if ("Seleccionar Grupo".equals(selectedGrupo)) {
        JOptionPane.showMessageDialog(this, "Debe seleccionar un grupo.");
        return;
    }

    try {
        // Extraer el ID del grupo seleccionado
        String[] parts = selectedGrupo.split(" - ");
        int idGrupo = Integer.parseInt(parts[0]);

        con = ConexionDB.conectar();
        if (con == null) {
            JOptionPane.showMessageDialog(this, "No se pudo establecer conexión con la base de datos.");
            return;
        }

        String sql = "SELECT m.nombre_materia AS materia, m.dia_semana AS dia, m.hora_inicio, m.hora_fin, m.aula " +
                     "FROM grupos_materias gm " +
                     "INNER JOIN materias m ON gm.id_materia = m.id " +
                     "WHERE gm.id_grupo = ?";
        stmt = con.prepareStatement(sql);
        stmt.setInt(1, idGrupo);

        rs = stmt.executeQuery();

        // Limpiar la tabla antes de cargar los horarios
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);

        while (rs.next()) {
            String materia = rs.getString("materia");
            String dia = rs.getString("dia");
            String horaInicio = rs.getString("hora_inicio");
            String horaFin = rs.getString("hora_fin");
            String aula = rs.getString("aula");

            model.addRow(new Object[]{materia, dia, horaInicio, horaFin, aula});
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error al cargar los horarios: " + e.getMessage());
    } finally {
        try {
            if (rs != null) rs.close();
            if (stmt != null) stmt.close();
            if (con != null) ConexionDB.cerrarConexion(con);
        } catch (SQLException ex) {
            System.out.println("Error al cerrar recursos: " + ex.getMessage());
        }
    }
}

// Método de inicialización para cargar los grupos al inicio
private void inicializarVista() {
    cargarGruposProfesor();
    cmbSemestre.addActionListener(evt -> cargarHorariosGrupoSeleccionado()); // Cargar horarios al cambiar selección
}

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VPHorarioProfesor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VPHorarioProfesor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VPHorarioProfesor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VPHorarioProfesor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnVolver;
    private javax.swing.JComboBox<String> cmbSemestre;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblLogo;
    private javax.swing.JLabel lblTitulo;
    // End of variables declaration//GEN-END:variables
}
