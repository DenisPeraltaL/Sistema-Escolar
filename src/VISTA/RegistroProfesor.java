/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package VISTA;

import MODELO.ConexionDB;
import javax.swing.JOptionPane;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.table.DefaultTableModel;
import java.sql.ResultSet;
import java.sql.Connection;
import javax.swing.JFrame;


/**
 *
 * @author Denis Peralta
 */
public class RegistroProfesor extends javax.swing.JFrame {

    /**
     * Creates new form RegistroProfesor
     */
    public RegistroProfesor() {
        initComponents();
        cargarTabla();
        initUserComboBox();
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
     
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblLogo = new javax.swing.JLabel();
        lblTitulo = new javax.swing.JLabel();
        lblDomicilio = new javax.swing.JLabel();
        txtDomicilio = new javax.swing.JTextField();
        lblNombre = new javax.swing.JLabel();
        txtApellidoM = new javax.swing.JTextField();
        btnVolver = new javax.swing.JButton();
        btnAñadir = new javax.swing.JButton();
        lblApellidoM = new javax.swing.JLabel();
        lblNumTel = new javax.swing.JLabel();
        txtNumTel = new javax.swing.JTextField();
        lblTexto2 = new javax.swing.JLabel();
        btnModificar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnEliminar = new javax.swing.JButton();
        txtApellidoP = new javax.swing.JTextField();
        lblApellidoP = new javax.swing.JLabel();
        lblCedula = new javax.swing.JLabel();
        txtCedula = new javax.swing.JTextField();
        txtNombre2 = new javax.swing.JTextField();
        cmbUsuario = new javax.swing.JComboBox<>();
        txtCorreo = new javax.swing.JTextField();
        lblCorreo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1070, 0));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Desing/Hope logo 13.png"))); // NOI18N
        getContentPane().add(lblLogo, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, -1, -1));

        lblTitulo.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        lblTitulo.setForeground(new java.awt.Color(51, 51, 51));
        lblTitulo.setText("REGISTRO PROFESOR");
        getContentPane().add(lblTitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 60, -1, -1));

        lblDomicilio.setFont(new java.awt.Font("Segoe UI Semibold", 1, 12)); // NOI18N
        lblDomicilio.setText("Domicilio");
        getContentPane().add(lblDomicilio, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 330, 390, 20));

        txtDomicilio.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204)));
        getContentPane().add(txtDomicilio, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 350, 700, 40));

        lblNombre.setFont(new java.awt.Font("Segoe UI Semibold", 1, 12)); // NOI18N
        lblNombre.setText("Nombre");
        getContentPane().add(lblNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 170, 210, 20));

        txtApellidoM.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204)));
        getContentPane().add(txtApellidoM, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 270, 420, 40));

        btnVolver.setBackground(new java.awt.Color(204, 204, 204));
        btnVolver.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Desing/Volver.png"))); // NOI18N
        btnVolver.setText("Volver");
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });
        getContentPane().add(btnVolver, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 670, 120, 30));

        btnAñadir.setBackground(new java.awt.Color(204, 204, 204));
        btnAñadir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Desing/Añadir.png"))); // NOI18N
        btnAñadir.setText("Añadir");
        btnAñadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAñadirActionPerformed(evt);
            }
        });
        getContentPane().add(btnAñadir, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 670, 120, 30));

        lblApellidoM.setFont(new java.awt.Font("Segoe UI Semibold", 1, 12)); // NOI18N
        lblApellidoM.setText("Apellido Materno");
        getContentPane().add(lblApellidoM, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 250, 260, 20));

        lblNumTel.setFont(new java.awt.Font("Segoe UI Semibold", 1, 12)); // NOI18N
        lblNumTel.setText("Número telefónico");
        getContentPane().add(lblNumTel, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 250, 270, 20));

        txtNumTel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204)));
        getContentPane().add(txtNumTel, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 270, 330, 40));

        lblTexto2.setFont(new java.awt.Font("Segoe UI Semibold", 1, 12)); // NOI18N
        lblTexto2.setForeground(new java.awt.Color(153, 153, 153));
        lblTexto2.setText("Complete la información con sus datos");
        getContentPane().add(lblTexto2, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 110, -1, 20));

        btnModificar.setBackground(new java.awt.Color(204, 204, 204));
        btnModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Desing/Editar.png"))); // NOI18N
        btnModificar.setText("Modificar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });
        getContentPane().add(btnModificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1150, 670, 120, 30));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setHeaderValue("Title 1");
            jTable1.getColumnModel().getColumn(1).setHeaderValue("Title 2");
        }

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 430, 1160, 200));

        btnEliminar.setBackground(new java.awt.Color(204, 204, 204));
        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Desing/Eliminar.png"))); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        getContentPane().add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1300, 670, 120, 30));

        txtApellidoP.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204)));
        getContentPane().add(txtApellidoP, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 190, 420, 40));

        lblApellidoP.setFont(new java.awt.Font("Segoe UI Semibold", 1, 12)); // NOI18N
        lblApellidoP.setText("Apellido Paterno");
        getContentPane().add(lblApellidoP, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 170, 260, 20));

        lblCedula.setFont(new java.awt.Font("Segoe UI Semibold", 1, 12)); // NOI18N
        lblCedula.setText("Cédula");
        getContentPane().add(lblCedula, new org.netbeans.lib.awtextra.AbsoluteConstraints(1050, 250, 250, 20));

        txtCedula.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204)));
        getContentPane().add(txtCedula, new org.netbeans.lib.awtextra.AbsoluteConstraints(1050, 270, 370, 40));

        txtNombre2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204)));
        txtNombre2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombre2ActionPerformed(evt);
            }
        });
        getContentPane().add(txtNombre2, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 190, 420, 40));

        cmbUsuario.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar Usuario" }));
        cmbUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbUsuarioActionPerformed(evt);
            }
        });
        getContentPane().add(cmbUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 190, 290, 40));

        txtCorreo.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204)));
        getContentPane().add(txtCorreo, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 350, 420, 40));

        lblCorreo.setFont(new java.awt.Font("Segoe UI Semibold", 1, 12)); // NOI18N
        lblCorreo.setText("Correo");
        getContentPane().add(lblCorreo, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 330, 250, 20));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnVolverActionPerformed

    private void btnAñadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAñadirActionPerformed
   // Validar si hay un usuario seleccionado
    String selectedItem = (String) cmbUsuario.getSelectedItem();
    if (selectedItem == null || selectedItem.startsWith("0 -")) {
        JOptionPane.showMessageDialog(this, "Por favor seleccione un usuario válido.");
        return;
    }

    // Extraer el ID del usuario seleccionado
    int idUsuario = Integer.parseInt(selectedItem.split(" - ")[0]);

    // Validar los datos del formulario
    String nombre = txtNombre2.getText();
    String apellidoP = txtApellidoP.getText();
    String apellidoM = txtApellidoM.getText();
    String telefono = txtNumTel.getText();
    String domicilio = txtDomicilio.getText();
    String cedula = txtCedula.getText();

    if (nombre.isEmpty() || apellidoP.isEmpty() || apellidoM.isEmpty() || telefono.isEmpty() || domicilio.isEmpty() || cedula.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Por favor complete todos los campos.");
        return;
    }

    // Insertar los datos en la tabla profesores
    try (Connection conn = ConexionDB.getConnection()) {
        String query = "INSERT INTO profesores (id_usuario, nombre, apellido_paterno, apellido_materno, telefono, domicilio, cedula) VALUES (?, ?, ?, ?, ?, ?, ?)";
        try (PreparedStatement pst = conn.prepareStatement(query)) {
            pst.setInt(1, idUsuario);
            pst.setString(2, nombre);
            pst.setString(3, apellidoP);
            pst.setString(4, apellidoM);
            pst.setString(5, telefono);
            pst.setString(6, domicilio);
            pst.setString(7, cedula);
            pst.executeUpdate();
        }

        JOptionPane.showMessageDialog(this, "Profesor añadido exitosamente.");
        limpiarCampos();
        cargarTabla();  // Actualizar tabla después de añadir

    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error al añadir el profesor: " + ex.getMessage());
    }
    }//GEN-LAST:event_btnAñadirActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
 // Acción para modificar los datos de un profesor
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Por favor seleccione un profesor de la tabla.");
            return;
        }

        int profesorId = (int) jTable1.getValueAt(selectedRow, 0); // Obtiene el ID del profesor seleccionado
        String nombre = txtNombre2.getText();
        String apellidoP = txtApellidoP.getText();
        String apellidoM = txtApellidoM.getText();
        String telefono = txtNumTel.getText();
        String domicilio = txtDomicilio.getText();
        String cedula = txtCedula.getText();

        if (nombre.isEmpty() || apellidoP.isEmpty() || apellidoM.isEmpty() || telefono.isEmpty() || domicilio.isEmpty() || cedula.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor complete todos los campos.");
            return;
        }

        try (Connection conn = ConexionDB.getConnection()) {
            String query = "UPDATE profesores SET nombre = ?, apellido_paterno = ?, apellido_materno = ?, telefono = ?, domicilio = ?, cedula = ? WHERE id = ?";
            try (PreparedStatement pst = conn.prepareStatement(query)) {
                pst.setString(1, nombre);
                pst.setString(2, apellidoP);
                pst.setString(3, apellidoM);
                pst.setString(4, telefono);
                pst.setString(5, domicilio);
                pst.setString(6, cedula);
                pst.setInt(7, profesorId);
                pst.executeUpdate();
            }

            JOptionPane.showMessageDialog(this, "Profesor modificado exitosamente.");
            limpiarCampos();
            cargarTabla();  // Recargar los datos de la tabla

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al modificar el profesor: " + ex.getMessage());
        }
    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
 // Acción para eliminar un profesor de la base de datos
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Por favor seleccione un profesor de la tabla.");
            return;
        }

        int profesorId = (int) jTable1.getValueAt(selectedRow, 0); // Obtiene el ID del profesor seleccionado

        try (Connection conn = ConexionDB.getConnection()) {
            String query = "DELETE FROM profesores WHERE id = ?";
            try (PreparedStatement pst = conn.prepareStatement(query)) {
                pst.setInt(1, profesorId);
                pst.executeUpdate();
            }

            JOptionPane.showMessageDialog(this, "Profesor eliminado exitosamente.");
            cargarTabla();  // Recargar los datos de la tabla

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al eliminar el profesor: " + ex.getMessage());
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
     // Obtener la fila seleccionada de la tabla
    int row = jTable1.getSelectedRow();

    if (row != -1) {
        // Obtener el ID del profesor desde la tabla
        int idProfesor = (int) jTable1.getValueAt(row, 0); // La columna 0 tiene el ID del profesor

        // Realizar consulta a la base de datos para obtener los datos completos
        try (Connection conn = ConexionDB.getConnection()) {
            String query = "SELECT nombre, apellido_paterno, apellido_materno, telefono, domicilio, cedula FROM profesores WHERE id = ?";
            try (PreparedStatement pst = conn.prepareStatement(query)) {
                pst.setInt(1, idProfesor);
                try (ResultSet rs = pst.executeQuery()) {
                    if (rs.next()) {
                        // Obtener los datos del profesor
                        String nombre = rs.getString("nombre");
                        String apellidoPaterno = rs.getString("apellido_paterno");
                        String apellidoMaterno = rs.getString("apellido_materno");
                        String telefono = rs.getString("telefono");
                        String domicilio = rs.getString("domicilio");
                        String cedula = rs.getString("cedula");

                        // Rellenar los campos con los datos obtenidos
                        txtNombre2.setText(nombre);
                        txtApellidoP.setText(apellidoPaterno);
                        txtApellidoM.setText(apellidoMaterno);
                        txtNumTel.setText(telefono);
                        txtDomicilio.setText(domicilio);
                        txtCedula.setText(cedula);
                    }
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al cargar los datos del profesor: " + ex.getMessage());
        }
    }
    }//GEN-LAST:event_jTable1MouseClicked

    private void txtNombre2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombre2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombre2ActionPerformed

    private void cmbUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbUsuarioActionPerformed
       // Validar que haya un usuario seleccionado
    String selectedItem = (String) cmbUsuario.getSelectedItem();
    if (selectedItem != null && !selectedItem.startsWith("0 -")) {
        // Extraer el ID del usuario desde el String seleccionado
        int idUsuario = Integer.parseInt(selectedItem.split(" - ")[0]);

        // Consultar los datos del usuario seleccionado
        try (Connection conn = ConexionDB.getConnection()) {
            String query = "SELECT nombre, apellidos, correo FROM usuarios WHERE id = ?";
            try (PreparedStatement pst = conn.prepareStatement(query)) {
                pst.setInt(1, idUsuario);
                try (ResultSet rs = pst.executeQuery()) {
                    if (rs.next()) {
                        // Dividir los apellidos y llenar los campos correspondientes
                        String[] apellidos = rs.getString("apellidos").split(" ");
                        txtNombre2.setText(rs.getString("nombre"));
                        txtApellidoP.setText(apellidos.length > 0 ? apellidos[0] : "");
                        txtApellidoM.setText(apellidos.length > 1 ? apellidos[1] : "");
                        txtCorreo.setText(rs.getString("correo"));
                    }
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al cargar datos del usuario: " + ex.getMessage());
        }
    }
    }//GEN-LAST:event_cmbUsuarioActionPerformed
private void initUserComboBox() {
    try (Connection conn = ConexionDB.getConnection()) {
        String query = "SELECT id, nombre, apellidos FROM usuarios WHERE tipo_usuario = 'Profesor'";
        try (PreparedStatement pst = conn.prepareStatement(query);
             ResultSet rs = pst.executeQuery()) {

            // Limpiar los elementos existentes
            cmbUsuario.removeAllItems();
            cmbUsuario.addItem("0 - Seleccionar Usuario"); // Primera opción vacía

            while (rs.next()) {
                int idUsuario = rs.getInt("id");
                String nombreCompleto = rs.getString("nombre") + " " + rs.getString("apellidos");

                // Añadir el ID y el nombre completo como cadena
                cmbUsuario.addItem(idUsuario + " - " + nombreCompleto);
            }
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error al cargar usuarios: " + ex.getMessage());
    }
}

    private void cargarTabla() {
        try (Connection conn = ConexionDB.getConnection()) {
            String query = "SELECT p.id AS id_profesor, p.id_usuario, p.nombre, p.telefono, p.cedula, p.domicilio FROM profesores p";
            try (PreparedStatement pst = conn.prepareStatement(query);
                 ResultSet rs = pst.executeQuery()) {

                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                model.setRowCount(0);  // Limpiar la tabla antes de agregar los datos

                while (rs.next()) {
                    model.addRow(new Object[]{
                        rs.getInt("id_profesor"),     // id del profesor
                        rs.getInt("id_usuario"),      // id del usuario donde se registró como profesor
                        rs.getString("nombre"),       // nombre del profesor
                        rs.getString("telefono"),     // teléfono del profesor
                        rs.getString("cedula"),       // cédula del profesor
                        rs.getString("domicilio")     // domicilio del profesor
                    });
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al cargar los datos: " + ex.getMessage());
        }
    }

    private void limpiarCampos() {
        txtNombre2.setText("");
        txtApellidoP.setText("");
        txtApellidoM.setText("");
        txtNumTel.setText("");
        txtDomicilio.setText("");
        txtCedula.setText("");
    }


// Método para cargar los datos de la tabla desde la base de datos

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegistroProfesor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegistroProfesor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegistroProfesor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegistroProfesor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RegistroProfesor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAñadir;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnVolver;
    private javax.swing.JComboBox<String> cmbUsuario;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblApellidoM;
    private javax.swing.JLabel lblApellidoP;
    private javax.swing.JLabel lblCedula;
    private javax.swing.JLabel lblCorreo;
    private javax.swing.JLabel lblDomicilio;
    private javax.swing.JLabel lblLogo;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JLabel lblNumTel;
    private javax.swing.JLabel lblTexto2;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JTextField txtApellidoM;
    private javax.swing.JTextField txtApellidoP;
    private javax.swing.JTextField txtCedula;
    private javax.swing.JTextField txtCorreo;
    private javax.swing.JTextField txtDomicilio;
    private javax.swing.JTextField txtNombre2;
    private javax.swing.JTextField txtNumTel;
    // End of variables declaration//GEN-END:variables
}
